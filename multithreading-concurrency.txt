
***************************************************************************************************
                                        SECCION 1 - INTRODUCCION
***************************************************************************************************

Clase 1 - Por qué se necesitan Threads?

* responsiveness - concurrency: capacidad de respuesta del sistema
    Ejemplo: Esperar por el customer support, larga espara por respuesta de una persona
     sin feedback de la aplicación. Todas estas cosas son las que queremos evitar.

     Las aplicaciones de user interface como plataformas de audio y video necesitan multitasking para tener una 
     respuesta inmediata a las acciones del usuario.

     !!Concurrency es multitasking y solo se necesita un core para alcanzar esto, ya que es mediante threads.

* performance - parallelism: completar acciones complejas más rápido
    Ejemplo: el core crea ilusiones de los tasks para ejecutarlos simultaneamente y con más cores se ejecutarían
    más tasks. Se puede completar más trabajo en el mismo periodo.
    Para escalamiento de servicios esto implica menos maquinas, menos dinero en hardware y más ahorro para el cliente.


Advertencia: La programación multithreading es diferente a la single threaded programming

---------------------------------

Clase 2 - What threads are to OS?

- mi definición es que los procesos(context) que se ejecutan en la memoria están conformados por hilos, en ese sentido, son parte de los procesos.

definicion más completa de threads:


Process (Context) :
cuando se ejecuta una aplicación el disco crea una instancia del app en la memoria.
esto se llama process o context y está conformado así (metada):

!!Importante: los threads tienen sus propios elementos pero comparten todos los recursos del context 

- PID
- files
- data(heap)
- code
- main thread
    - Stack                 --------> region in memory where local variables are stored and functions are executed
    - Instruction pointer   --------> address of the next instruction to execute

(cuando es multithread el app):
- Thread 1
    - Stack                 (propio del thread)
    - Instruction pointer   (propio del thread)


--------------------------------->

Clase 3 - Context switch, Thread scheduling and Thread vs Processes

* Context switch
    Ya que cada proceso compite con otro por ejecutarse en el core existe un stop al thread de un proceso
    y un start a otro thread de otro proceso. Este switch o cambio también genera costos de concurrency porque
    hay un trabajo de guardar los recursos del thread y vovler a cargar los de otro thread(y así sucesivamente).
    !!El problema Trashing es cuando hay muchos hilos y el core se está tomando más tiempo en este switcheo que en ejecutar las tareas.

* Thread scheduling
    El OS tiene una priorización dinámica para priorizar los threads dinámicos y evitar la "starvation" o inanición de un thread en el sistema.


***************************************************************************************************
                                        SECCION 2 - THREAD CREATION
***************************************************************************************************


Clase 4 - How to create Threads ?

* El main thread se ejecuta por defecto. Si no se define la prioridad no se puede saber con certeza
el orden de ejecución de los Threads.

Todas las propiedades están encapsuladas en la clase Thread.
Ver el proyecto con los packages y clases correspondientes a los temas.

* Primera forma de crear(usando Runnable en el constructor):

El objeto necesita la implementación de Runnable interface(se puede usar lambda)

Thread thread = new Thread(new Runnable() {
    @Override
    public void run() {

    }
});

Ver:
- ThreadsCreation.java
- ThreadsException.java

setName para establecer nombre de Thread
setPriority para la prioridad que tendrá en el cpu
start para ejecutar la lógica del thread
setUncaughtExceptionHandler para manejo de errores

---------------------------------------------------------------------------------------------------

Clase 5 - Threads Inheritance

* Segunda forma de crear Thread (usando herencia)

Puedo acceder con this directamente a los métodos

Ejemplo de la caja fuerte y los hackers en ThreadsInheritance2.java

                                  Runnable
                                     |
                                   Thread
Vault -----> HackerThread         ---|---         PoliceThread
        AscendingHackerThread
        DescendingHackerThread

Nota: El ejemplo consiste en que ingreso un password random y los hacker threads hacen su proceso
hasta encontrar la combinación correcta antes que el police thread. Si pasan los 10 seg sin encontrar
termina el programa y el police gana, caso contrario el hacker gana.


***************************************************************************************************
                       SECCION 3 - THREADING FUNDAMENTALS - THREAD COORDINATIONS
***************************************************************************************************

Clase 6 - Thread termination & Daemon threads

* Thread termination (Cuándo y por qué terminar un thread?)
    - Los threads consumen memory y kernel resources incluso cuando no están haciendo nada.
    - También consumen CPU Cycles y Cache memory.
    - Si el thread terminó su trabajo y la aplicación sigue ejecutandose, necesitamos limpiar
      los recursos de ese thread.
    - SI un thread falla, lo detendremos.
    - Por defecto una aplicación funciona con al menos un thread, podemos terminar todos los demás.

* Thread.interrupt()
    ¿Cuándo podemos interrumpir un Thread?
    - Si el thread ejecuta un método que lanza(throws) un InterruptedException y solo en esos métodos  (Ver ThreadTermination.java)
    - Si el código que está ejecutando el thread maneja el "interrupt signal" explicitamente.          (Ver ThreadTermination2.java)


* Daemon threads
    Sirven para prevenir que un thread bloquee la aplicación de finalizar. Son threads de background que no bloquean la aplicación para terminar.
    Es decir, no importa si inesperadamente se cierra la aplicación y el thread se estaba ejecutando, no se necesita esperar para terminar la aplicación.

    Ejemplos de Daemon threads:
    - Background tasks como file saving thread in a text editor

    Ver ThreadDaemon.java ---> Es el mismo ejemplo que ThreadTermination2.java solo que aquí no manejamos una lógica de "interrupt signal"
    y seteamos el daemon thread y finalizamos el main thread, con esto comprobamos que si el main termina, no es necesario esperar a que termine
    el daemon thread para que finalice la aplicación.

---------------------------------------------------------------------------------------------------

Clase 7 - Joining Threads (threads coordination)

Un thread no debe esperar la finalización de otro como para recibir algo como input porque eso consume mucho CPU cada vez que evalúa la finalización del thread anterior.

Por ejemplo: Factorial calculation(CPU Intensive task)

Se creó la clase:
DThreadJoin -----> La idea es que el calculo de cada factorial sea delegado a diferentes threads y así lo hacemos en paralelo.

* El problema es que cuando se tienen varios threads se puede bloquear el flujo de la aplicación si uno de ellos no termina su proceos.

thread.join(2000) ----> Usando join la idea es que sin importar que otro thread no haya terminado su cálculo, no bloquea o impide que otros threads muestren su resultado,
                        sin embargo, una vez que otros threads terminan su proceso el thread bloqueado sigue procesando y la aplicación sigue funcionando.

                        * Por eso necesito usar thread.daemon(true) para que una vez que termine el tiempo de espera así haya un thread bloqueado se termine la aplicación.

La lección es que se necesita tener mayor control del código de threads porque pueden tomar un tiempo inesperado y con técnicas como daemon y join se puede controlar
el flujo de la aplicación. Es necesario porque no sabemos con exactitud el orden de ejecución de los threads. Si un thread no se completa en el tiempo esperado simplemente
termino su proceso(defensive programming).


---------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------


